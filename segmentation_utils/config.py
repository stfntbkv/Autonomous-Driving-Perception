from yacs.config import CfgNode as CN
import os

_C = CN()

# Model configuration
_C.MODEL = CN()
_C.MODEL.NAME = 'seg_hrnet'
_C.MODEL.PRETRAINED = 'LaneDrivableSegmentation/hrnetv2_w32_imagenet_pretrained.pth'
_C.MODEL.ALIGN_CORNERS = True
_C.MODEL.EXTRA = CN(new_allowed=True)

# Stage 1
_C.MODEL.EXTRA.STAGE1 = CN()
_C.MODEL.EXTRA.STAGE1.NUM_MODULES = 1
_C.MODEL.EXTRA.STAGE1.NUM_BRANCHES = 1
_C.MODEL.EXTRA.STAGE1.NUM_BLOCKS = [4]
_C.MODEL.EXTRA.STAGE1.NUM_CHANNELS = [64]
_C.MODEL.EXTRA.STAGE1.BLOCK = 'BOTTLENECK'
_C.MODEL.EXTRA.STAGE1.FUSE_METHOD = 'SUM'

# Stage 2
_C.MODEL.EXTRA.STAGE2 = CN()
_C.MODEL.EXTRA.STAGE2.NUM_MODULES = 1
_C.MODEL.EXTRA.STAGE2.NUM_BRANCHES = 2
_C.MODEL.EXTRA.STAGE2.NUM_BLOCKS = [4, 4]
_C.MODEL.EXTRA.STAGE2.NUM_CHANNELS = [32, 64]  # Channels for each branch (W32)
_C.MODEL.EXTRA.STAGE2.BLOCK = 'BASIC'
_C.MODEL.EXTRA.STAGE2.FUSE_METHOD = 'SUM'

# Stage 3
_C.MODEL.EXTRA.STAGE3 = CN()
_C.MODEL.EXTRA.STAGE3.NUM_MODULES = 4
_C.MODEL.EXTRA.STAGE3.NUM_BRANCHES = 3
_C.MODEL.EXTRA.STAGE3.NUM_BLOCKS = [4, 4, 4]
_C.MODEL.EXTRA.STAGE3.NUM_CHANNELS = [32, 64, 128]  # Channels for each branch (W32)
_C.MODEL.EXTRA.STAGE3.BLOCK = 'BASIC'
_C.MODEL.EXTRA.STAGE3.FUSE_METHOD = 'SUM'

# Stage 4
_C.MODEL.EXTRA.STAGE4 = CN()
_C.MODEL.EXTRA.STAGE4.NUM_MODULES = 3
_C.MODEL.EXTRA.STAGE4.NUM_BRANCHES = 4
_C.MODEL.EXTRA.STAGE4.NUM_BLOCKS = [4, 4, 4, 4]
_C.MODEL.EXTRA.STAGE4.NUM_CHANNELS = [32, 64, 128, 256]  # Channels for each branch (W32)
_C.MODEL.EXTRA.STAGE4.BLOCK = 'BASIC'
_C.MODEL.EXTRA.STAGE4.FUSE_METHOD = 'SUM'
_C.MODEL.EXTRA.FINAL_CONV_KERNEL = 1

# Dataset configuration
_C.DATASET = CN()
_C.DATASET.NUM_CLASSES = None  # Not used directly in two-head setup
_C.DATASET.ROOT = ''  # Set to your dataset root directory
_C.DATASET.TRAIN_SET = 'train'
_C.DATASET.VAL_SET = 'val'


_C.TRAIN = CN()
_C.TRAIN.LR = 0.01
_C.TRAIN.WEIGHT_DECAY = 0.0005
_C.TRAIN.BATCH_SIZE_PER_GPU = 8
_C.TRAIN.NUM_EPOCHS = 100
_C.TRAIN.IMAGE_SIZE = [720, 1280] 

# Loss configuration (optional, for reference)
_C.LOSS = CN()
_C.LOSS.USE_OHEM = False
_C.LOSS.OHEMTHRES = 0.9
_C.LOSS.OHEMKEEP = 100000

def get_default_config():
    return _C.clone()